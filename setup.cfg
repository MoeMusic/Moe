[flake8]
max-line-length = 88
docstring-convention = google
max-module-members = 9
select =
    B,    # bugbear
    B9,   # bugbear opinionated errors; disabled by default
    C90,  # mccabe
    D,    # docstrings
    DAR,  # darglint (another docstring linter)
    E,    # flake8 error
    F,    # pyflakes
    F9,   # use-fstring
    N4,   # broken-line
    N8,   # pep8-naming
    S,    # bandit
    W,    # wemake-style
ignore =
    B950,    # bug-bear line length; just use flake8 line length limit
    DAR402,  # Excess exceptions in "Raises" (doesn't seem to always work)
    E203,    # whitespace before ':' (black conflict)
    E266,    # too many leading '#' for block comment
    W503,    # line break before binary operator (black conflict)
    WPS110,  # "value" is common to refer to a tag/field's value
    WPS2,    # complexity checks
    WPS301,  # allow use of dotted raw imports
    WPS305,  # prohibit use of f strings
    WPS306,  # requires all classes to have base classes
    WPS317,  # incorrect multi-line parameters (black conflict)
    WPS326,  # prohibit implicit string concatenation (use parens to concat)
    WPS336,  # prohibit explicit string concatenation w/o .format()
    WPS337,  # prohibit multiline conditionals
    WPS348,  # don't start line with dots (black conflict)
    WPS355,  # unnecessary blank line after brack (black conflict)
    WPS361,  # inconsistent loop comprehension (black conflict)
    WPS404,  # complex default values
    WPS410,  # forbids `__all__` (used normally to declare a public api)
    WPS412,  # allow logic in `__init__.py`
    WPS602,  # prohibit use of static methods
per-file-ignores =
   # E800: config file has commented out code as examples
   # WPS437: alembic can use protected attributes
   alembic/env.py:E800,WPS437
   # D1: database migrations don't need docstrings
   # I: isort errors tend to misinterpret alembic as a local package
   # WPS102: module/file names aren't standard
   # WPS437: alembic can use protected attributes
   alembic/versions/*.py:D1,I,WPS102,WPS437
   # DAR101: pytest uses fixtures as arguments, documenting each use is unnecessary
   # DAR102: factory arguments with fixtures can be weird
   # S101: pytest uses assert statements
   # S311: we aren't using random for security/cryptography purposes
   # WPS2: tests are as complex as they need to be
   # WPS430: nested functions occur in fixture factories
   # WPS432: raw numbers are common for testing
   # WPS437: allow testing of protected attributes/functions
   # WPS441: it's common to test error exit codes out of scope of their context
   # WPS442: pytest has fixture inheritance--leads to arg shadow false-positives
   # WPS609: mocks can override magic methods
   tests/*:DAR101,DAR102,S101,S311,WPS2,WPS430,WPS432,WPS437,WPS441,WPS442,WPS609
   # F401: import unused
   # F403: allow * imports (used for packaging in some cases)
   # WPS300: allow local file imports (used for local modules)
   # WPS347: allow * imports (used for packaging in some cases)
   # WPS440: * causes block overlaps
   */__init__.py:F401,F403,WPS300,WPS347,WPS440
   # WPS437: library models cross-talk `_id` frequently
   # WPS601: shadowed class attributes are used with sqlalchemy
   moe/core/library/*.py:WPS437,WPS601

[darglint]
docstring_style = google
strictness = short

[mypy]
plugins = sqlalchemy.ext.mypy.plugin

# Not really concerned with type annotations on our database migration scripts.
[mypy-alembic.*]
ignore_missing_imports = True

# Wanted, but not implemented.
# https://github.com/rochacbruno/dynaconf/issues/448
[mypy-dynaconf.*]
ignore_missing_imports = True

# Still supports python2.7
[mypy-mediafile.*]
ignore_missing_imports = True

[mypy-musicbrainzngs.*]
ignore_missing_imports = True

# starting with python 3.8, we can switch to using importlib
[mypy-pkg_resources.*]
ignore_missing_imports = True

# Wanted, but not implemented.
# https://github.com/pytest-dev/pluggy/pull/225
[mypy-pluggy.*]
ignore_missing_imports = True
